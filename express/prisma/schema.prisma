generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id               String  @id @default(cuid())
  userId           String
  type             String
  provider         String
  provierAccountId String
  refresh_token    String?
  access_token     String?
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String?
  session_state    String?
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  name          String
  email         String    @unique
  id            String    @id @unique @default(cuid())
  role          Role      @default(USER)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id             Int      @id @unique @default(autoincrement())
  title          String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  classification String   @default("all")
  content        String   @default("")
  penName        String   @default("anonymous")
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  good           Int      @default(0)
  bad            Int      @default(0)
}

model Profile {
  id        Int      @id @unique @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
}

enum Role {
  USER
  ADMIN
}

model Comment {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    Int
  content   String
  good      Int      @default(0)
  bad       Int      @default(0)
  penName   String   @default("anonymous")
}
